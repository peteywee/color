Color Module for Bash Environments
Welcome to the color module, a comprehensive system designed to bring consistent, role-based color enforcement to your Bash command-line environment, logs, and custom scripts. This project aims to enhance readability, provide quick visual cues for system status, and ensure a standardized color palette across your development and operational workflows.

Features
Role-Based Color Mapping: Assigns specific, predefined colors to system roles (e.g., directories, files, errors, success messages, specific programming languages/runtimes like TypeScript, JavaScript, Node.js).

Color Policy Enforcement: Includes a color-laws.json to enforce strict rules, suchs as prohibiting pure white or pure black colors for roles, ensuring visual hierarchy.

24-bit True Color Support: Utilizes ANSI 24-bit color codes for a richer and more precise color palette, assuming terminal support.

Modular Installation: Separated installation scripts for the core color module and common Bash aliases, allowing for flexible deployment.

Dynamic Role Registration: Easily add new application roles and assign them dynamic colors via install_hook.sh.

Comprehensive Aliases: Provides a set of useful Bash aliases for Git, Terraform, Docker, Python, and general system commands.

Backup & Overwrite Protection: Installer scripts can back up existing user files and prevent accidental overwrites of custom configurations.

Versioning: Tracks installed versions for easy updates.

Uninstall Script: A dedicated script to safely remove all installed components.

Repository Structure
color/
├── .github/                  # GitHub-specific configurations (e.g., CI/CD workflows)
│   └── workflows/
│       └── main.yml          # GitHub Actions CI/CD workflow
├── install.sh                  # Main installer for core color module files
├── install_aliases.sh          # Installer for common Bash aliases
├── uninstall.sh                # Unified uninstaller for both color module and aliases
├── ctl_environment_template/   # Source templates copied to $HOME/ctl_environment
│   ├── colors.source.sh.template # Template for color functions and PS1 setup
│   ├── install_hook.sh.template  # Template for adding new color roles
│   ├── color_roles.json.template # Template for the core JSON color role definitions
│   └── laws/
│       └── color/
│           └── color-laws.json.template # Template for color policy rules
├── docs/                       # Project documentation sources (for GitHub Pages/Wiki)
│   └── color-enforcement.md    # Detailed documentation on color logic and usage
├── bash_aliases_template.sh    # Template for the ~/.bash_aliases file
└── Dockerfile                  # Dockerfile to build a containerized environment with the module installed

Installation
Prerequisites
jq: A lightweight and flexible command-line JSON processor.

On Debian/Ubuntu: sudo apt-get install jq

On macOS: brew install jq

Docker (if you plan to use the Dockerized environment)

Step-by-step Installation
Clone the repository:

git clone https://github.com/peteywee/color.git
cd color

Run the main installer script: This sets up the core color module in ~/ctl_environment.

chmod +x install.sh
./install.sh

Use ./install.sh --force to overwrite existing ctl_environment config/source files.

Use ./install.sh --force --backup to overwrite existing files and create backups.

Make the install_hook.sh executable: This script is generated by install.sh.

chmod +x ~/ctl_environment/install_hook.sh

Run the aliases installer script: This sets up common Bash aliases in ~/.bash_aliases.

chmod +x install_aliases.sh
./install_aliases.sh

Use ./install_aliases.sh --force to overwrite existing ~/.bash_aliases.

Use ./install_aliases.sh --force --backup to overwrite and back up.

Reload your shell: For the changes to take effect in your current terminal session. New sessions will load them automatically.

source ~/.bashrc

Using the Dockerized Environment
You can build a Docker image that has the color module and aliases pre-installed.

Build the Docker image:
Navigate to the root of your cloned repository where the Dockerfile is located.

docker build -t color-module-env .

Run an interactive container:

docker run -it color-module-env

Once inside the container, your Bash environment will have the color module and aliases loaded. You can test them:

colortest
dps
color_apply typescript "Hello from inside Docker!"

Usage
Test Colors: colortest (defined in ~/.bash_aliases)

View Defined Roles: colorroles (defined in ~/.bash_aliases)

Apply Colors: color_apply <role> "Your text here" (e.g., color_apply success "Operation completed!")

Add a New App Role: ~/ctl_environment/install_hook.sh <name> <category> <hierarchy>

Example: ~/ctl_environment/install_hook.sh myapp deployment child

Common Aliases: Explore ~/.bash_aliases for shortcuts like gs (git status), tfp (terraform plan), dps (docker ps), ports, mkcd, etc.

Documentation
For more in-depth documentation, including advanced usage, customization, and troubleshooting:

GitHub Pages Site (Link will be active once configured)

GitHub Wiki (Accessible via the "Wiki" tab in the repository)

Uninstallation
To remove the color module and aliases:

chmod +x uninstall.sh
./uninstall.sh

Follow the prompts. Remember to source ~/.bashrc or open a new terminal after uninstalling.

Contributing
Contributions are welcome! Please feel free to open issues or submit pull requests.

License
MIT License (You'll create a LICENSE file if you choose MIT)# color
